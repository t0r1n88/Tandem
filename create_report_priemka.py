"""
Скрипт для создания отчетов по приемной кампании на основании данных из Тандем
"""
import pandas as pd
import time
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")


def processing_report_tandem(name_file_person:str,end_folder:str):
    """

    :param name_file_person: файл полученный во вкладке Отчеты, Выборка абитуриентов
    :param end_folder:
    :return:
    """
    # Получаем текущее время для того чтобы использовать в названии
    t = time.localtime()
    current_time = time.strftime('%H_%M_%d_%m', t)
    person_df = pd.read_excel(name_file_person,sheet_name='Абитуриенты',skiprows=8)

    svod_df = pd.pivot_table(person_df,
                             index=['Формирующее подр.','Набор ОП','Вид возмещения затрат'],
                             values='ФИО',
                             aggfunc='count',
                             )

    svod_df = svod_df.reset_index()



    svod_df.rename(columns={'ФИО':'Заявлений','Набор ОП':'Конкурс'},inplace=True)

    svod_df['union'] = svod_df['Конкурс'] + ' ' + svod_df['Вид возмещения затрат'] # для соединения


    dct_kcp = {'Набор ОП':['09.02.07 Информационные системы и программирование','43.01.06 Проводник на железнодорожном транспорте','43.02.06 Сервис на транспорте (по видам транспорта)',
                           '43.02.06 Сервис на транспорте (по видам транспорта)','15.01.05 Сварщик (ручной и частично механизированной сварки (наплавки)','15.01.05 Сварщик (ручной и частично механизированной сварки (наплавки)',
                           '15.01.05 ФБ Сварщик (ручной и частично механизированной сварки (наплавки)','15.01.35 Мастер слесарных работ','15.01.35 Мастер слесарных работ',
                           '23.01.10 Слесарь по обслуживанию и ремонту подвижного состава','23.01.10 Слесарь по обслуживанию и ремонту подвижного состава','44.02.06 Профессиональное обучение (по отраслям)',
                           '44.02.06 Профессиональное обучение (по отраслям)','08.01.31 Электромонтажник электрических сетей и электрооборудования РБ','08.01.31 Электромонтажник электрических сетей и электрооборудования РБ',
                           '08.02.09 Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий','08.02.09 Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий','13.02.07 Электроснабжение (по отраслям)',
                           '13.02.07 Электроснабжение (по отраслям)','13.02.13 Эксплуатация и обслуживание электрического и электромеханического оборудования (по отраслям)','13.02.13 Эксплуатация и обслуживание электрического и электромеханического оборудования (по отраслям)',
                           '15.01.05 Сварщик (ручной и частично механизированной сварки (наплавки) Хоринский филиал','43.01.09 Повар, кондитер (Хоринский филиал)','35.01.27 Мастер сельскохозяйственного производства ХФ',
                           'Тепловоз. 23.01.09 Машинист локомотива','Тепловоз. 23.01.09 Машинист локомотива','Электровоз. 23.01.09 Машинист локомотива',
                           'Электровоз. 23.01.09 Машинист локомотива'
                           ],
               'Вид приема':['договор','договор','общий',
                             'договор', 'общий', 'договор',
                             'общий', 'общий', 'договор',
                             'общий', 'договор', 'общий',
                             'договор', 'общий', 'договор',
                             'общий', 'договор', 'общий',
                             'договор', 'общий', 'договор',
                             'общий', 'общий', 'общий',
                             'общий', 'договор', 'общий',
                             'договор'],
               'КЦП':[30,25,40,
                      10,50,15,
                      25,25,5,
                      20,20,20,
                      10,40,20,
                      25,5,50,
                      10,25,5,
                      25,20,25,
                      25,25,25,
                      25
                      ],
               'Отделение':['Отделение металлообработки','Отделение железнодорожного транспорта','Отделение железнодорожного транспорта',
                            'Отделение железнодорожного транспорта', 'Отделение металлообработки', 'Отделение металлообработки',
                            'Отделение металлообработки', 'Отделение металлообработки', 'Отделение металлообработки',
                            'Отделение металлообработки', 'Отделение металлообработки', 'Отделение металлообработки',
                            'Отделение металлообработки', 'Отделение энергоснабжения', 'Отделение энергоснабжения',
                            'Отделение энергоснабжения', 'Отделение энергоснабжения', 'Отделение энергоснабжения',
                            'Отделение энергоснабжения', 'Отделение энергоснабжения', 'Отделение энергоснабжения',
                            'Хоринский филиал', 'Хоринский филиал', 'Хоринский филиал',
                            'Отделение железнодорожного транспорта', 'Отделение железнодорожного транспорта', 'Отделение железнодорожного транспорта',
                            'Отделение железнодорожного транспорта'
                            ],

               }

    # Создаем датафрейм с КЦП
    kcp_df = pd.DataFrame(dct_kcp)
    kcp_df.replace({'договор':'по договору','общий':'бюджет'},inplace=True)
    kcp_df['union'] = kcp_df['Набор ОП'] + ' ' + kcp_df['Вид приема']

    # svod_df = svod_df.merge(kcp_df,how='inner',left_on='union',right_on='union')
    svod_df = kcp_df.merge(svod_df,how='outer',left_on='union',right_on='union')
    svod_df.drop(columns=['Конкурс','Формирующее подр.','Вид возмещения затрат'],inplace=True)
    svod_df.rename(columns={'Набор ОП':'Конкурс'},inplace=True)


    # Считаем забранные заявления
    person_df['Забрали заявления'] = person_df['Состояние выбран. конкурса'].apply(
            lambda x: 1 if x == 'Забрал документы' else 0)

    zab_df = pd.pivot_table(person_df,
                             index=['Формирующее подр.','Набор ОП','Вид возмещения затрат'],
                             values='Забрали заявления',
                             aggfunc='sum',
                            )

    zab_df = zab_df.reset_index()
    zab_df.rename(columns={'Вид возмещения затрат':'1'},inplace=True)
    zab_df['union'] = zab_df['Набор ОП'] + ' ' + zab_df['1']  # для соединения
    svod_df = svod_df.merge(zab_df,how='outer',left_on='union',right_on='union')
    svod_df.drop(columns=['Набор ОП','Формирующее подр.','1'],inplace=True)

    # Считаем Итоговое количество заявлений
    svod_df['Итого заявлений'] = svod_df['Заявлений'] - svod_df['Забрали заявления']
    # Считаем человек на место
    svod_df['Чел/место'] = round(svod_df['Итого заявлений'] / svod_df['КЦП'],2)



    # Считаем забранные заявления
    person_df['Сдано оригиналов'] = person_df['Сдан оригинал'].apply(
            lambda x: 1 if x == 'да' else 0)

    orig_df = pd.pivot_table(person_df,
                             index=['Формирующее подр.','Набор ОП','Вид возмещения затрат'],
                             values='Сдано оригиналов',
                             aggfunc='sum',
                            )

    orig_df = orig_df.reset_index()
    orig_df.rename(columns={'Вид возмещения затрат':'1'},inplace=True)
    orig_df['union'] = orig_df['Набор ОП'] + ' ' + orig_df['1']  # для соединения
    svod_df = svod_df.merge(orig_df,how='outer',left_on='union',right_on='union')
    svod_df.drop(columns=['Набор ОП','Формирующее подр.','1'],inplace=True)

    # Средний балл
    avg_df = pd.pivot_table(person_df,
                            index=['Формирующее подр.','Набор ОП','Вид возмещения затрат'],
                            values='Ср. балл док-та об образовании',
                            aggfunc='mean')
    avg_df = avg_df.reset_index()
    avg_df.rename(columns={'Вид возмещения затрат':'1','Ср. балл док-та об образовании':'Средний балл'},inplace=True)
    avg_df['Средний балл'] = round(avg_df['Средний балл'],2)
    avg_df['union'] = avg_df['Набор ОП'] + ' ' + avg_df['1']  # для соединения
    svod_df = svod_df.merge(avg_df,how='outer',left_on='union',right_on='union')
    svod_df.drop(columns=['Набор ОП','Формирующее подр.','1'],inplace=True)

    svod_df.drop(columns=['union'],inplace=True)
    svod_df = svod_df.reindex(columns=['Отделение','Конкурс','Вид приема','КЦП','Заявлений','Забрали заявления',
                             'Итого заявлений','Сдано оригиналов','Чел/место','Средний балл'])

    svod_df.replace({'Отделение металлообработки': 'МО', 'Отделение железнодорожного транспорта': 'ЖД',
                    'Отделение энергоснабжения':'ЭО','Хоринский филиал':'ХФ'}, inplace=True)


    sum_row = svod_df.sum(axis=0).to_frame().transpose()

    sum_row['Отделение'] = 'Всего'
    sum_row['Конкурс'] = ''
    sum_row['Вид приема'] = ''
    sum_row['Чел/место'] = ''
    sum_row['Средний балл'] = ''


    # объединяем датафреймы

    svod_df = pd.concat([svod_df, sum_row], axis=0)




    # Считаем общие параметры
    person_df['Доп. статус'] = person_df['Доп. статус'].astype(str)
    # Удаляем дубликаты
    person_df.drop_duplicates(subset='СНИЛС',inplace=True)

    # Общежитие
    person_df['Количество общежитие'] = person_df['Нуждается в общежитии'].apply(
            lambda x: 1 if x == 'да' else 0)
    dorm_value = person_df['Количество общежитие'].sum()


    # Сироты
    person_df['Сироты'] = person_df['Доп. статус'].apply(
            lambda x: 1 if 'Сирота' in x else 0)

    orpans_value = person_df['Сироты'].sum()

    # СВО
    person_df['СВО'] = person_df['Доп. статус'].apply(
            lambda x: 1 if 'военнослужащих' in x else 0)

    svo_value = person_df['СВО'].sum()

    dct_all_value = {'Нуждающиеся в общежитии':dorm_value,
                     'Сироты':orpans_value,
                     'СВО':svo_value}

    spec_df = pd.DataFrame.from_dict(dct_all_value, orient='index')
    spec_df = spec_df.reset_index()
    spec_df.columns = ['Показатель', 'Количество абитуриентов']








    with pd.ExcelWriter(f'{end_folder}/Ежедневный отчет {current_time}.xlsx') as writer:
        svod_df.to_excel(writer, sheet_name='Отчет',index=False)
        spec_df.to_excel(writer,sheet_name='Спец данные',index=False)



















    # svod_df.to_excel(f'{end_folder}/Ежедневный отчет {current_time}.xlsx',index=False)






if __name__ == '__main__':
    main_file_person = 'data/PersonReport.xlsx'
    main_end_folder= 'data/Результат'
    processing_report_tandem(main_file_person,main_end_folder)

    print('Lindy Booth')
